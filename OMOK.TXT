#include <windows.h>	// 윈도우 헤더파일

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);	//CALLBACK 매크로
HINSTANCE g_hinst;					//인스턴스 핸들
LPCTSTR lpszClass = TEXT("김재민_18032020");		//제목 표시줄

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow)//main 함수
{
	HWND hWnd;				//윈도우 핸들 선언
	MSG Message;			             //메세지 구조체 변수 선언
	WNDCLASS WndClass;		             //Windows Class 구조체 변수 선언
	g_hinst = hInstance;                          	//hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0;			//예약 영역. 지금은 사용X
	WndClass.cbWndExtra = 0;			//예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);		// 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);				//윈도우의 커서 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);			//윈도우의 커서 아이콘 모양 지정
	WndClass.hInstance = hInstance;					//윈도우 클래스를 등록하는 프로그램 번호
	WndClass.lpfnWndProc = WndProc;					//윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass;					//윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL;  //MAKEINTRESOURCE(IDR_MENU1);				//이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_VREDRAW;				//윈도우의 스타일을 정의

	RegisterClass(&WndClass);						//WNDCLASS 구조체의 번지를 전달


	//윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT/*100, 100, 1920, 1000*/, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	//메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {		//Queue에 있는 메세지를 읽어들인다
		if ((Message.message == WM_KEYDOWN || Message.message == WM_KEYUP) && Message.hwnd != hWnd) {
			PostMessage(hWnd, Message.message, Message.wParam, Message.lParam);
		}
		TranslateMessage(&Message);			//키보드 입력 메세지를 가공하여 프로그램에서 쉽게 사용할 수 있도록
		DispatchMessage(&Message);			//메세지를 윈도우의 메세지 처리 함수 WndProc로 전달
	}

	return (int)Message.wParam;				//탈출 코드. 프로그램 종료
}
//보드 크기
#define MAXROW 20
#define MAXCOL 20
static int Board[MAXROW][MAXCOL];

BOOL SearchResult(int xPos, int yPos, int x, int y, int User) 
{                                                             //카운트가 5가 될 때 동안 반복
	int iCount = 0;
	while (Board[xPos][yPos] == User)
	{
		xPos = max(-1, min(MAXCOL, xPos + x));
		yPos = max(-1, min(MAXROW, yPos + y));
	}
	while (Board[xPos - x][yPos - y] == User)
	{
		++iCount;
		xPos = max(-1, min(MAXCOL, xPos + (-x)));
		yPos = max(-1, min(MAXROW, yPos + (-y)));
	}
	if (iCount == 5) 
	{
		return TRUE;
	}
	return FALSE;
}
BOOL SearchContinueBall(int xPos, int yPos, int User) //보드에 놓인 백돌, 흑돌 검색 함수
{
	if (SearchResult(xPos, yPos, 1, 0, User))
		return TRUE;
	if (SearchResult(xPos, yPos, 0, 1, User))
		return TRUE;
	if (SearchResult(xPos, yPos, 1, -1, User))
		return TRUE;
	if (SearchResult(xPos, yPos, 1, 1, User))
		return TRUE;
	return FALSE;
}
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	static int cxBlock, cyBlock;
	static BOOL Order = TRUE; //순서

	switch (message)
	{
	case WM_CREATE:       
	{
		RECT rect;
		SetRect(&rect, 0, 0, 600, 600);
		AdjustWindowRect(&rect, WS_OVERLAPPEDWINDOW, FALSE);
		MoveWindow(hWnd, 100, 100, rect.right - rect.left, rect.bottom - rect.top, TRUE);
	}
	return 0;
	case WM_SIZE:
		cxBlock = LOWORD(lParam) / MAXCOL;
		cyBlock = HIWORD(lParam) / MAXROW;
		return 0;
	case WM_LBUTTONDOWN: 
	{
		int xPos = LOWORD(lParam) / cyBlock;
		int yPos = HIWORD(lParam) / cyBlock;
		if (Order == FALSE)
		{
			MessageBox(hWnd, "백돌 순서입니다.", "순서오류", MB_OK);
			return 0;
		}
		if (Board[yPos][xPos] != 0) //돌이 놓여있을 경우
		{
			MessageBox(hWnd, "돌이 놓여 있습니다.", "오류", MB_OK);
			return 0;
		}
		Board[yPos][xPos] = 1;

		RECT rect;
		SetRect(&rect, xPos*cxBlock, yPos*cyBlock, (xPos + 1)*cxBlock, (yPos + 1)*cyBlock);
		InvalidateRect(hWnd, &rect, TRUE);
		Order = FALSE;
		if (SearchContinueBall(yPos, xPos, 1))
		{
			MessageBox(hWnd, "흑돌이 이겼습니다.", "승리", MB_OK);
			if (MessageBox(hWnd, "다시하시겠습니까?", "재경기", MB_YESNO) != IDYES)
				SendMessage(hWnd, WM_DESTROY, NULL, NULL);
			else
			{
				memset(Board, 0, sizeof(Board));
				InvalidateRect(hWnd, NULL, TRUE);
				Order = TRUE;
			}
		}
	}
	return 0;
	case WM_RBUTTONDOWN:
	{
		int xPos = LOWORD(lParam) / cyBlock;
		int yPos = HIWORD(lParam) / cyBlock;
		if (Order == TRUE)
		{
			MessageBox(hWnd, "흑돌 순서입니다.", "순서오류", MB_OK);
			return 0;
		}
		if (Board[yPos][xPos] != 0) //돌이 놓여있을 경우
		{
			MessageBox(hWnd, "돌이 놓여 있습니다.", "오류", MB_OK);
			return 0;
		}
		Board[yPos][xPos] = 2;

		RECT rect;
		SetRect(&rect, xPos*cxBlock, yPos*cyBlock, (xPos + 1)*cxBlock, (yPos + 1)*cyBlock);
		InvalidateRect(hWnd, &rect, TRUE);
		Order = TRUE;
		if (SearchContinueBall(yPos, xPos, 2))
		{
			MessageBox(hWnd, "백돌이 이겼습니다.", "승리", MB_OK);
			if (MessageBox(hWnd, "다시하시겠습니까?", "재경기", MB_YESNO) != IDYES)
				SendMessage(hWnd, WM_DESTROY, NULL, NULL);
			else
			{
				memset(Board, 0, sizeof(Board));
				InvalidateRect(hWnd, NULL, TRUE);
			}
		}
	}
	return 0;
	case WM_KEYDOWN:
	{
		POINT pt;
		GetCursorPos(&pt); //cursor는 스크린좌표
		ScreenToClient(hWnd, &pt);
		//바둑판 영역에만 돌을 놓을수 있도록 마우스 커서와 가장 가까운 좌표에 돌을 놓음
		int xPos = max(0, min(MAXCOL - 1, pt.x / cxBlock));
		int yPos = max(0, min(MAXROW - 1, pt.y / cyBlock));
		switch (wParam)
		{
		case VK_LEFT:
			xPos = (xPos + MAXCOL - 1) % MAXCOL;
			break;
		case VK_RIGHT:
			xPos = (xPos + 1) % MAXCOL;
			break;
		case VK_UP:
			yPos = (yPos + MAXROW - 1) % MAXROW;
			break;
		case VK_DOWN:
			yPos = (yPos + 1) % MAXROW;
			break;
		}

		pt.x = xPos * cxBlock + cxBlock / 2;
		pt.y = yPos * cyBlock + cyBlock / 2;
		switch (wParam)
		{
		case VK_RETURN:
			SendMessage(hWnd, WM_LBUTTONDOWN, MK_LBUTTON, MAKELPARAM(pt.x, pt.y));
			break;
		case VK_SPACE:
			SendMessage(hWnd, WM_RBUTTONDOWN, MK_RBUTTON, MAKELPARAM(pt.x, pt.y));
			break;
		}
		ClientToScreen(hWnd, &pt);
		SetCursorPos(pt.x, pt.y);
	}
	return 0;
	case WM_PAINT:
	{
		HDC hdc;
		RECT rect;
		PAINTSTRUCT ps;
		hdc = BeginPaint(hWnd, &ps);
		for (int y = 0; y < MAXROW - 1; ++y)
		{
			for (int x = 0; x < MAXCOL - 1; ++x)
			{
				Rectangle(hdc, x*cxBlock + cxBlock / 2, y*cyBlock + cyBlock / 2, (x + 1)*cxBlock + cxBlock / 2, (y + 1)*cyBlock + cyBlock / 2);
			}
		}
		/////////////////////////바둑알 그리기////////////////////////////////////////
		HBRUSH hBrush[2];
		hBrush[0] = CreateSolidBrush(RGB(0, 0, 0));
		hBrush[1] = CreateSolidBrush(RGB(255, 255, 255));
		for (int y = 0; y < MAXROW; ++y)
		{
			for (int x = 0; x < MAXCOL; ++x)
			{
				if (Board[y][x])
				{
					SelectObject(hdc, hBrush[Board[y][x] - 1]);
					Ellipse(hdc, x*cxBlock, y*cyBlock, (x + 1)*cxBlock, (y + 1)*cyBlock);
				}
			}
		}
		SelectObject(hdc, (HBRUSH)GetStockObject(WHITE_BRUSH));
		DeleteObject(hBrush[0]);
		DeleteObject(hBrush[1]);

		GetClientRect(hWnd, &rect);
		EndPaint(hWnd, &ps);
	}
	return 0;
	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	}
	return DefWindowProc(hWnd, message, wParam, lParam);
}